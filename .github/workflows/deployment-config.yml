name: CI/CD Workflow
run-name: Running CI and CD

on:
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: chzz-rep
  ECS_SERVICE: chzz-market

jobs:
  # CI 단계: 코드 빌드 및 테스트
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      # 소스 코드 체크아웃
      - uses: actions/checkout@v4

      # JDK 설정
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'gradle'

      # Gradle 설정 및 캐시 최적화
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Redis 서버 실행
      - name: Redis Server in GitHub Actions
        uses: supercharge/redis-github-action@1.8.0

      # Gradle 빌드 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test --no-daemon

      # 테스트 실행
      - name: Test with Gradle
        env:
          SPRING_PROFILES_ACTIVE: test
          CLOUD_AWS_CREDENTIALS_ACCESS_KEY: ${{ secrets.S3_AWS_ACCESS_KEY_ID }}
          CLOUD_AWS_CREDENTIALS_SECRET_KEY: ${{ secrets.S3_AWS_SECRET_ACCESS_KEY }}
          CLOUD_AWS_REGION_STATIC: ${{ secrets.AWS_REGION }}
          CLOUD_AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          CLOUD_AWS_CLOUDFRONT_DOMAIN: ${{ secrets.AWS_CLOUDFRONT_DOMAIN }}
          PAYMENT_TOSS_CLIENT_KEY: ${{ secrets.TEST_CLIENT_KEY }}
          PAYMENT_TOSS_SECURITY_KEY: ${{ secrets.TEST_SECRET_KEY }}
          SPRING_DATA_REDIS_HOST: ${{ secrets.TEST_REDIS_HOST }}
          SPRING_DATA_REDIS_PORT: ${{ secrets.TEST_REDIS_PORT }}
        run: ./gradlew test --no-daemon

  # CD 단계: 배포 작업
  deploy:
    needs: build  # CI 단계가 성공한 후에 배포 진행
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from branch name
        id: extract-version
        run: |
          BRANCH_NAME="${{ github.ref }}"  # Full ref name, e.g., refs/heads/release/5.5.6
          BRANCH_NAME=${BRANCH_NAME#refs/heads/}  # Remove 'refs/heads/' prefix to get 'release/5.5.6'

          # Display the extracted branch name for debugging
          echo "Extracted branch name: $BRANCH_NAME"

          # Check if the branch name matches the expected pattern
          if [[ "$BRANCH_NAME" =~ ^(release|hotfix)/([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            VERSION="${BASH_REMATCH[2]}"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "Extracted version: $VERSION"
          else
            echo "❌ Branch name does not match release/x.x.x or hotfix/x.x.x format."
            exit 1
          fi

      - name: AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: S3에서 설정파일 복사
        run: |
          aws s3 cp s3://chzzmarket-production-storage/chzz-production-properties/application-prod.yml \
          ./src/main/resources/application-prod.yml

      # Docker 이미지 빌드 및 ECR 배포
      - name: Docker 이미지 빌드 및 ECR 배포
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.VERSION }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: EC2로 파일 복사 (compose.yaml 및 nginx.conf 포함)
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: './compose.yaml,./nginx.conf'
          target: '/home/ec2-user'

      - name: EC2에서 Docker Compose를 통한 애플리케이션 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export AWS_REGION=${{ env.AWS_REGION }}
            export ECR_URI=${{ secrets.ECR_URI }}
            
            # .env 파일 생성 및 ECR_IMAGE 변수 추가
            touch /home/ec2-user/.env
            echo ECR_IMAGE=${{ steps.build-image.outputs.image }} >> /home/ec2-user/.env
            
            # ECR 레지스트리에 로그인
            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_URI/chzz-rep
            
            # 기존 컨테이너 정지 및 삭제
            sudo docker compose down
            
            # 최신 이미지를 pull
            sudo docker compose pull
            
            # Docker Compose로 애플리케이션 실행
            sudo docker compose up -d
