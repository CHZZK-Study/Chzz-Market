name: Java CI with Gradle

on:
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 소스 코드 체크아웃
      - uses: actions/checkout@v4

      # JDK 설정
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'gradle'

      # Gradle 설정 및 캐시 최적화
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Redis 서버 실행
      - name: Redis Server in GitHub Actions
        uses: supercharge/redis-github-action@1.8.0

      # Gradle 빌드 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test --no-daemon --info

      # 테스트 실행
      - name: Test with Gradle
        env:
          SPRING_PROFILES_ACTIVE: test
          CLOUD_AWS_CREDENTIALS_ACCESS_KEY: ${{ secrets.S3_AWS_ACCESS_KEY_ID }}
          CLOUD_AWS_CREDENTIALS_SECRET_KEY: ${{ secrets.S3_AWS_SECRET_ACCESS_KEY }}
          CLOUD_AWS_REGION_STATIC: ${{ secrets.AWS_REGION }}
          CLOUD_AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          CLOUD_AWS_CLOUDFRONT_DOMAIN: ${{ secrets.AWS_CLOUDFRONT_DOMAIN }}
          PAYMENT_TOSS_CLIENT_KEY: ${{ secrets.TEST_CLIENT_KEY }}
          PAYMENT_TOSS_SECURITY_KEY: ${{ secrets.TEST_SECRET_KEY }}
          SPRING_DATA_REDIS_HOST: ${{ secrets.TEST_REDIS_HOST }}
          SPRING_DATA_REDIS_PORT: ${{ secrets.TEST_REDIS_PORT }}
        run: ./gradlew test --no-daemon
